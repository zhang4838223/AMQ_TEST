<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供 -->
    <bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
        <!--<property name="brokerURL" value="failover://(tcp://127.0.0.1:61616?tcpNoDelay=true&amp;wireFormat.maxInactivityDuration=0,tcp://127.0.0.1:61617?tcpNoDelay=true&amp;wireFormat.maxInactivityDuration=0,tcp://127.0.0.1:61618?tcpNoDelay=true&amp;wireFormat.maxInactivityDuration=0)" />-->
        <property name="brokerURL" value="tcp://127.0.0.1:61616?tcpNoDelay=true&amp;wireFormat.maxInactivityDuration=0&amp;wireFormat.maxInactivityDurationInitalDelay=30000" />
        <property name="useAsyncSend" value="true" />

        <!--是否异常分派消息（如果消费时间很长，采用异步分派就提高性能）-->
        <property name="dispatchAsync" value="true" />
    </bean>

    <!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
    <bean id="connectionFactory"
          class="org.springframework.jms.connection.SingleConnectionFactory">
        <!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
        <property name="targetConnectionFactory" ref="targetConnectionFactory" />
    </bean>

    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
        <property name="connectionFactory" ref="targetConnectionFactory"></property>
        <property name="maxConnections" value="10"></property>
        <property name="expiryTimeout" value="10"></property>
    </bean>

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="pooledConnectionFactory" />
        <property name="defaultDestination" ref="queueDestination"></property>

        <property name="pubSubDomain" value="false" />
        <property name="explicitQosEnabled" value="true" />
        <property name="deliveryMode" value="1" />
        <!--<property name="receiveTimeout" value="0" />-->
    </bean>
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate1" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="pooledConnectionFactory" />
        <property name="defaultDestination" ref="queueDestination1"></property>
        <!--<property name="receiveTimeout" value="0" />-->
    </bean>
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate2" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="pooledConnectionFactory" />
        <property name="defaultDestination" ref="queueDestination2"></property>
        <!--<property name="receiveTimeout" value="0" />-->
    </bean>
    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
    <bean id="jmsTemplate3" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="pooledConnectionFactory" />
        <property name="defaultDestination" ref="queueDestination3"></property>
        <!--<property name="receiveTimeout" value="0" />-->
    </bean>

    <!-- Spring提供的JMS工具类，它可以进行消息发送、接收等
     接收Consumer的响应
     -->
    <bean id="recTemplate" class="org.springframework.jms.core.JmsTemplate">
        <!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
        <property name="connectionFactory" ref="pooledConnectionFactory" />
        <property name="defaultDestination" ref="resDestination"></property>
        <!--<property name="receiveTimeout" value="0" />-->
    </bean>
    <!--这个是队列目的地，点对点的-->
    <bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>monkey</value>
        </constructor-arg>
    </bean>
    <!--这个是队列目的地，点对点的-->
    <bean id="queueDestination1" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>monkey1</value>
        </constructor-arg>
    </bean>
    <!--这个是队列目的地，点对点的-->
    <bean id="queueDestination2" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>monkey2</value>
        </constructor-arg>
    </bean>
    <!--这个是队列目的地，点对点的-->
    <bean id="queueDestination3" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>monkey3</value>
        </constructor-arg>
    </bean>

    <!--这个是队列目的地，点对点的-->
    <bean id="resDestination" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg>
            <value>response</value>
        </constructor-arg>
    </bean>

    <!--这个是主题目的地，一对多的-->
    <bean id="topicDestination" class="org.apache.activemq.command.ActiveMQTopic">
        <constructor-arg value="topic01"/>
    </bean>

    <!-- 任务执行器 -->
    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"/>

</beans>